#!/bin/bash
OS=`uname`
if [ "$OS" == "Darwin" ]; then
  echo "Building with Clang"
  COMPILER=clang
else
  echo "Building with GCC"
  COMPILER=gcc
fi
function echo_red()
{
  tput setaf 1
  echo $1
  tput sgr0
}

function echo_green()
{
  tput setaf 2
  echo $1
  tput sgr0
}

function copy_headers()
{
  if [ ! -d test/include ]; then
    mkdir -p test/include
  fi
 
  headers=`find src -name *.h`
  for h in $headers; do 
    cp $h test/include 
  done
}

function test_against_file()
{
  copy_headers 
  file=$1
  echo "Compiling $file"
  `$COMPILER $file \
    src/util/*.c \
    src/data/*.c \
    src/net/*.c \
    src/session/*.c \
    src/integrity/*.c \
    src/crypto/*.c \
    -Itest/include -Isrc \
    -o ${file:0:${#file}-2} \
    -pthread -w -rdynamic -lcrypto -lssl -ljnxc -lprotobuf-c -g`
  ./$current
  out=$?
  if [ ! $out -eq 0 ]; then
    echo_red "Test failed"
    exit 1
  else
    echo_green "Test passed"
    rm $current
  fi
  rm -rf test/include
}

function run_full_suite()
{
  filelist=`ls test/*.c`
  for file in $filelist; do
    if [ "$file" == "run_tests" ] 
    then
      continue
    fi 
    current=${file:0:${#file}-2}
    if [ -e $current ]
    then
      rm $current
    fi
    echo "Running next test for --> ${file}"
    test_against_file $file
  done;
}

function run_single_test()
{
  filelist=`ls test/*.c`
  for file in $filelist; do
    if [ "$file" == "$1"  ]; then
      echo "found match"

      current=${file:0:${#file}-2}

      if [ -e $current ]
      then
        rm $current
      fi
      test_against_file $file  
    fi
  done
}

if [ -z "$1"  ]; then 
  run_full_suite
else
  run_single_test $1
fi

exit 0
